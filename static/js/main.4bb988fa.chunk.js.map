{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","val","insert","e","num","currentTarget","value","setState","equal","String","length","match","eval","clean","back","substring","render","className","placeholder","onClick","rowSpan","style","height","colSpan","width","React","Component","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4bb988fa.chunk.js","sourcesContent":["import React from 'react';\n\nimport './App.css';\n\nclass App extends React.Component {\n    state = {\n        val: \"\"\n    }\n    insert = (e) => {\n        if (this.state.val===\"error\"){\n            let num =e.currentTarget.value\n            this.setState({\n                val:num\n            })\n\n        }else {\n            let num = this.state.val + e.currentTarget.value\n            this.setState({\n                val: num\n            })\n        }\n    };\n\n\n    equal = () => {\n        let num=String(this.state.val)\n        if(num[num.length-1].match(/[0-9]/)){\n            num=eval(num)\n            this.setState({\n                val:num\n            })\n        }else {\n            this.setState({\n                val:\"error\"\n            })\n        }\n\n    };\n\n    clean = () => {\n        this.setState({\n            val:\"\"\n        })\n    };\n\n    back = () => {\n        let num= this.state.val+\"\"\n        num = num.substring(0, num.length - 1)\n        this.setState({\n            val:num\n        })\n    };\n    render = () => {\n\n\n        return (\n            <div className=\"App\">\n                <div className='bg'></div>\n                <div className='main'>\n\n                    <input className='textView' placeholder={'enter'}  value={this.state.val}/>\n\n                    <table>\n                        <tr>\n                            <td><button className='button'  onClick={this.clean}>C</button></td>\n                            <td><button className='button' value='<' onClick={this.back}>{'<'}</button></td>\n                            <td><button className='button' value='/' onClick={this.insert}>/</button></td>\n                            <td><button className='button' value='*' onClick={this.insert}>*</button></td>\n                        </tr>\n                        <tr>\n                            <td><button className='button' value='7' onClick={this.insert}>7</button></td>\n                            <td><button className='button' value='8' onClick={this.insert}>8</button></td>\n                            <td><button className='button' value='9' onClick={this.insert}>9</button></td>\n                            <td><button className='button' value='-' onClick={this.insert}>-</button></td>\n                        </tr>\n                        <tr>\n                            <td><button className='button' value='4' onClick={this.insert}>4</button></td>\n                            <td><button className='button' value='5' onClick={this.insert}>5</button></td>\n                            <td><button className='button' value='6' onClick={this.insert}>6</button></td>\n                            <td><button className='button' value='+' onClick={this.insert}>+</button></td>\n                        </tr>\n                        <tr>\n                            <td><button className='button' value='1' onClick={this.insert}>1</button></td>\n                            <td><button className='button' value='2' onClick={this.insert}>2</button></td>\n                            <td><button className='button' value='3' onClick={this.insert}>3</button></td>\n                            <td rowSpan=\"5\"><button className='button' style ={{height: '108px'}} onClick={this.equal}>=</button></td>\n                        </tr>\n                        <tr>\n                            <td colSpan=\"2\"><button className='button'  style ={{width: '106px'}} value='0' onClick={this.insert}>0</button></td>\n                            <td><button className='button' value='.' onClick={this.insert}>{\".\"}</button></td>\n                        </tr>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}